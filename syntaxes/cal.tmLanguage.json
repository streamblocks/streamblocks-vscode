{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "CAL Language Actor",
	"scopeName": "source.cal",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#package"
		},
		{
			"include": "#namespace"
		},
		{
			"include": "#namespace-decl"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.cal"
						}
					},
					"match": "/\\*\\*/",
					"name": "comment.block.empty.cal"
				},
				{
					"include": "#comments-inline"
				}
			]
		},
		"comments-inline": {
			"patterns": [
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.cal"
						}
					},
					"end": "\\*/",
					"name": "comment.block.cal"
				},
				{
					"begin": "(^[ \\t]+)?(?=//)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.cal"
						}
					},
					"end": "(?!\\G)",
					"patterns": [
						{
							"begin": "//",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.comment.cal"
								}
							},
							"end": "\\n",
							"name": "comment.line.double-slash.cal"
						}
					]
				}
			]
		},
		"annotations": {
			"patterns": [
				{
					"begin": "((@)[^\\s(]+)(\\()",
					"beginCaptures": {
						"1": {
							"name": "storage.type.annotation.cal"
						},
						"2": {
							"name": "punctuation.definition.annotation.cal"
						},
						"3": {
							"name": "punctuation.definition.annotation-arguments.begin.bracket.round.cal"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.annotation-arguments.end.bracket.round.cal"
						}
					},
					"name": "meta.declaration.annotation.java",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "constant.other.key.cal"
								},
								"2": {
									"name": "keyword.operator.assignment.cal"
								}
							},
							"match": "(\\w*)\\s*(=)"
						},
						{
							"include": "#code"
						}
					]
				}
			]
		},
		"package": {
			"begin": "\\b(package)\\b\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.source.package.cal"
				}
			},
			"end": "\\s*(;)",
			"endCaptures": {
				"1": {
					"name": "punctuation.terminator.cal"
				}
			},
			"name": "meta.package.java",
			
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "(?<=\\.)\\s*\\.|\\.(?=\\s*;)",
					"name": "invalid.illegal.character_not_allowed_here.cal"
				},
				{
					"match": "(?<!_)_(?=\\s*(\\.|;))|\\b\\d+|-+",
					"name": "invalid.illegal.character_not_allowed_here.cal"
				},
				{
					"match": "\\.",
					"name": "punctuation.separator.cal"
				}
			]
		},
		"namespace": {
			"name": "meta.namespace.cal",
			"begin": "\\b(namespace)\\b\\s+(\\w+)\\s*(:)",
			"beginCaptures": {
				"1": {
					"name": "keyword.source.namespace.cal"
				},
				"2": {
					"name": "constant.other.cal"
				},
				"3": {
					"name": "punctuation.terminator.namesapce.cal"
				}
			},
			"end": "\\b(end)\\b\\s",
			"endCaptures": {
				"1": {
					"name": "keyword.source.cal"
				}
			},
			"patterns": [
				{
					"include": "#namespace-decl"
				}
			]
		},
		"namespace-decl": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#annotations"
				},
				{
					"include": "#imports"
				},
				{
					"include": "#variables"
				},
				{
					"include": "#actor"
				},
				{
					"include": "#network"
				},
				{
					"include": "#function"
				},
				{
					"include": "#procedure"
				}
			]
		},
		"imports": {
			"begin": "\\b(import)\\b\\s*\\b(all|entity|var|type)?\\b\\s",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.import.cal"
				},
				"2": {
					"name": "storage.modifier.all.cal"
				}
			},
			"end": "\\s*(;)",
			"endCaptures": {
				"1": {
					"name": "punctuation.terminator.cal"
				}
			},
			"name": "meta.import.cal",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "(?<=\\.)\\s*\\.|\\.(?=\\s*;)",
					"name": "invalid.illegal.character_not_allowed_here.cal"
				},
				{
					"match": "(?<!\\.)\\s*\\*",
					"name": "invalid.illegal.character_not_allowed_here.cal"
				},
				{
					"match": "(?<!_)_(?=\\s*(\\.|;))|\\b\\d+|-+",
					"name": "invalid.illegal.character_not_allowed_here.cal"
				},
				{
					"match": "(?x)\\b(?<!\\$)(action | actor | all | and | any | begin | const | div | do |dom | else | elsif | end | endaction | endactor | endchoose | endforeach | endfunction | endif | endinitialize | endlambda | endlet | endpriority | endproc | entity | endprocedure | endschedule | endwhile  | false | for | foreach | fsm | function | guard | if | import | in | initialize | lambda | let | map | mod | multi | mutable | namepsace | not | null | old | or | priority | proc | procedure | regexp | repeat | rng | schedule | then | time | true  | while | network | entities | structure | external)\\b",
					"name": "invalid.illegal.character_not_allowed_here.cal"
				},
				{
					"match": "\\.",
					"name": "markup.italic.cal"
				},
				{
					"match": "\\*",
					"name": "variable.language.wildcard.cal"
				}
			]
		},
		"actor": {
			"name": "meta.actor.cal",
			"begin": "(?=\\w?[\\w\\s]*\\b(?:actor)\\s+\\w+)",
			"end": "\\b(end|endactor)\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.source.cal"
				}
			},
			"patterns": [
				{
					"include": "#storage-modifiers"
				},
				{
					"captures": {
						"1": {
							"name": "keyword.source.cal"
						},
						"2": {
							"name": "entity.name.type.actor.cal"
						}
					},
					"match": "(actor)\\s+(\\w+)",
					"name": "meta.actor.identifier.cal"
				},
				{
					"include": "#arguments"
				},
				{
					"include": "#entity-ports"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#actor-body"
				}
			]
		},
		"actor-body": {
			"name": "meta.actor.body.cal",
			"begin": "(?<=\\:)",
			"end": "\\.*(?=(\\b(end)\\b))",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#variables"
				},
				{
					"include": "#function"
				},
				{
					"include": "#procedure"
				},
				{
					"include": "#process-body"
				},
				{
					"include": "#action"
				},
				{
					"include": "#priority"
				},
				{
					"include": "#schedule"
				}
			]
		},
		"arguments": {
			"name": "meta.arguments.cal",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.arguments.begin.bracket.round.cal"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.arguments.end.bracket.round.cal"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#types"
				},
				{
					"match": ",",
					"name": "punctuation.separator.delimiter.java"
				},
				{
					"include": "#code"
				}
			]
		},
		"entity-ports": {
			"name": "meta.entity.ports.cal",
			"begin": "(?<=\\))\\s*",
			"end": "(\\:)",
			"endCaptures": {
				"0": {
					"name": "punctuation.entity-ports.end.cal"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#types"
				},
				{
					"include": "#variables"
				},
				{
					"match": ",",
					"name": "punctuation.separator.delimiter.java"
				},
				{
					"match": "(==>)",
					"name": "keyword.control.cal"
				}
			]
		},
		"network": {
			"name": "meta.network.cal",
			"begin": "(?=\\w?[\\w\\s]*\\b(?:network)\\s+\\w+)",
			"end": "\\b(end|endnetwork)\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.source.cal"
				}
			},
			"patterns": [
				{
					"include": "#storage-modifiers"
				},
				{
					"captures": {
						"1": {
							"name": "keyword.source.cal"
						},
						"2": {
							"name": "entity.name.type.network.cal"
						}
					},
					"match": "(network)\\s+(\\w+)",
					"name": "meta.network.identifier.cal"
				},
				{
					"include": "#arguments"
				},
				{
					"include": "#entity-ports"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#network-body"
				}
			]
		},
		"network-body": {
			"name": "meta.network.body.cal",
			"begin": "(?<=\\:)",
			"end": "\\.*(?=(\\b(end)\\b))",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#local-variable-declaration"
				},
				{
					"include": "#function"
				},
				{
					"include": "#network-entities"
				},
				{
					"include": "#network-structure"
				}
			]
		},
		"network-entities": {
			"name": "meta.network.entities.declaration.cal",
			"begin": "(?x) \\b(entities)\\b \\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.source.cal"
				}
			},
			"end": "\\.*(?=(\\b(end|structure)\\b))",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#network-entities-lines"
				}
			]
		},
		"network-entities-lines": {
			"begin": "((?:[a-zA-Z0-9_]+))\\s*(=)\\s*((?:[a-zA-Z0-9_]+))\\s*",
			"beginCaptures": {
				"1": {
					"name": "string.unquoted.instance.cal"
				},
				"2": {
					"name": "keyword.operator.cal"
				},
				"3": {
					"name": "entity.name.type.cal"
				}
			},
			"end": ";",
			"name": "meta.network.entity.line.cal",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#parameters"
				}
			]
		},
		"network-structure": {
			"name": "meta.network.entities.declaration.cal",
			"begin": "(?x) \\b(structure)\\b \\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.source.cal"
				}
			},
			"end": "\\.*(?=(\\b(end)\\b))",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#network-structure-statements"
				}
			]
		},
		"network-structure-statements": {
			"patterns": [
				{
					"include": "#network-structure-statement"
				},
				{
					"include": "#network-structure-statement-if"
				},
				{
					"include": "#network-structure-statement-for"
				}
			]
		},
		"network-structure-statement": {
			"begin": "((?:[a-zA-Z0-9_]+)\\.)*([a-zA-Z0-9_]+)\\s*(-->)\\s*((?:[a-zA-Z0-9_]+)\\.)*([a-zA-Z0-9_]+)",
			"beginCaptures": {
				"1": {
					"name": "string.unquoted.instance.cal"
				},
				"2": {
					"name": "variable.other.tag.cal"
				},
				"3": {
					"name": "keyword.control.cal"
				},
				"4": {
					"name": "string.unquoted.instance.cal"
				},
				"5": {
					"name": "variable.other.tag.cal"
				}
			},
			"end": ";",
			"name": "meta.network.structure.statement.cal",
			"patterns": [
				{
					"include": "#comments"
				}
			]
		},
		"network-structure-statement-if": {
			"begin": "\\b(if)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.cal"
				}
			},
			"end": "\\b(end|endif)\\b",
			"endCaptures": {
				"1": {
					"name": "keyword.control.cal"
				}
			},
			"name": "meta.network.strcutre.statement.if.cal",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#network-structure-statements"
				},
				{
					"match": "\\b(then|else)\\b",
					"name": "keyword.control.cal"
				}
			]
		},
		"network-structure-statement-for": {
			"begin": "\\b(for)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.cal"
				}
			},
			"end": "\\b(end|endfor)\\b",
			"endCaptures": {
				"1": {
					"name": "keyword.control.cal"
				}
			},
			"name": "meta.network.strcutre.statement.for.cal",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#network-structure-statements"
				},
				{
					"match": "\\b(do)\\b",
					"name": "keyword.control.cal"
				}
			]
		},
		"process-body": {
			"name": "meta.actor.process.body.cal",
			"begin": "\\b(repeat|do)\\b\\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.cal"
				}
			},
			"end": "\\b(end)\\b\\s",
			"endCaptures": {
				"1": {
					"name": "keyword.control.cal"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#code"
				}
			]
		},
		"action": {
			"begin": "(?x) (\\w+(?:\\.\\w+)* \\s*:)?  \\s* \\b(action|initialize)\\b \\s",
			"beginCaptures": {
				"1": {
					"name": "string.unquoted.action.name.cal"
				},
				"2": {
					"name": "keyword.source.cal"
				}
			},
			"end": "\\b(end|endaction)\\b\\s",
			"endCaptures": {
				"1": {
					"name": "keyword.source.cal"
				}
			},
			"name": "meta.action.cal",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#action-guard"
				},
				{
					"include": "#local-variable-declaration"
				},
				{
					"include": "#procedure-body"
				}
			]
		},
		"action-guard": {
			"name": "meta.action.guard.cal",
			"begin": "(?x) \\b(guard)\\b \\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.source.cal"
				}
			},
			"end": "\\.*(?=(\\b(end|do|var)\\b))",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#numbers"
				}
			]
		},
		"priority": {
			"begin": "(?x) \\b(priority)\\b \\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.source.cal"
				}
			},
			"end": "\\b(end|endpriority)\\b\\s",
			"endCaptures": {
				"1": {
					"name": "keyword.source.cal"
				}
			},
			"name": "meta.priority.cal",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "(\\w+(?:\\.\\w+)*)",
					"name": "string.unquoted.action.tag.cal"
				},
				{
					"match": "(>)",
					"name": "keyword.control.cal"
				}
			]
		},
		"schedule": {
			"name": "meta.schedule.cal",
			"begin": "(schedule)\\s*(fsm)?\\s+(\\w+)\\s*:",
			"beginCaptures": {
				"1": {
					"name": "keyword.source.cal"
				},
				"2": {
					"name": "variable.language.cal"
				},
				"3": {
					"name": "constant.other.cal"
				}
			},
			"end": "(?x) \\b(end | endschedule)\\b\\s",
			"endCaptures": {
				"1": {
					"name": "keyword.source.cal"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "([a-zA-Z0-9_]+)",
					"name": "constant.other.cal"
				},
				{
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{
							"match": "(\\w+(?:\\.\\w+)*)",
							"name": "string.other.action.tag.cal"
						}
					]
				},
				{
					"match": "(-->)",
					"name": "keyword.control.cal"
				}
			]
		},
		"function-old": {
			"begin": "(?x)  \\s*  \\b(function)\\s+ (?=[[:alpha:]_][[:word:]]* \\s* \\()",
			"end": "\\b(end|endfunction)\\b\\s",
			"beginCaptures": {
				"1": {
					"name": "keyword.source.cal"
				}
			},
			"endCaptures": {
				"1": {
					"name": "keyword.source.cal"
				}
			},
			"name": "meta.function.cal",
			"patterns": [
				{
					"include": "#callable-def-name"
				},
				{
					"include": "#parameters"
				},
				{
					"include": "#local-variable-declaration"
				},
				{
					"include": "#code"
				}
			]
		},
		"local-variable-declaration": {
			"name": "meta.local.variables.declaration.cal",
			"begin": "(?x) \\b(var)\\b \\s*",
			"beginCaptures": {
				"1": {
					"name": "keyword.source.cal"
				}
			},
			"end": "\\.*(?=((end)|(begin)|(guard)|(do)|:|(entities)))",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#variables"
				},
				{
					"include": "#numbers"
				}
			]
		},
		"function": {
			"name": "meta.function.cal",
			"begin": "(?=\\w?[\\w\\s]*\\b(?:function)\\s+\\w+)",
			"end": "\\b(end|endfunction)\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.source.cal"
				}
			},
			"patterns": [
				{
					"include": "#storage-modifiers"
				},
				{
					"captures": {
						"1": {
							"name": "keyword.source.cal"
						},
						"2": {
							"name": "entity.name.function.cal"
						}
					},
					"match": "(function)\\s+(\\w+)",
					"name": "meta.function.identifier.cal"
				},
				{
					"include": "#arguments"
				},
				{
					"include": "#function-output-port"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#code"
				}
			]
		},
		"function-output-port":{
			"name": "meta.function.output.port.cal",
			"begin": "(-->)",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.cal"
				}
			},
			"end": "\\.*(?=:)",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#types"
				},
				{
					"include": "#local-variable-declaration"
				}
			]
		},
		"procedure-old": {
			"begin": "(?x) \\b(procedure)\\s+ (?=[[:alpha:]_][[:word:]]* \\s* \\()",
			"end": "\\b(end)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.source.cal"
				}
			},
			"endCaptures": {
				"1": {
					"name": "keyword.source.cal"
				}
			},
			"name": "meta.procedure.cal",
			"patterns": [
				{
					"include": "#callable-def-name"
				},
				{
					"include": "#parameters"
				},
				{
					"include": "#local-variable-declaration"
				},
				{
					"include": "#procedure-body"
				}
			]
		},
		"procedure": {
			"name": "meta.procedure.cal",
			"begin": "(?=\\w?[\\w\\s]*\\b(?:procedure)\\s+\\w+)",
			"end": "\\b(end|endfunction)\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.source.cal"
				}
			},
			"patterns": [
				{
					"include": "#storage-modifiers"
				},
				{
					"captures": {
						"1": {
							"name": "keyword.source.cal"
						},
						"2": {
							"name": "entity.name.function.cal"
						}
					},
					"match": "(procedure)\\s+(\\w+)",
					"name": "meta.function.identifier.cal"
				},
				{
					"include": "#arguments"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#local-variable-declaration"
				},
				{
					"include": "#procedure-body"
				}
			]
		},
		"procedure-body": {
			"name": "meta.procedure.body.cal",
			"begin": "(?x) (?:(begin|do))\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.source.cal"
				}
			},
			"end": "\\.*(?=\\b(end)\\b)",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#code"
				}
			]
		},
		"callable-def-name": {
			"patterns": [
				{
					"name": "entity.name.function.cal",
					"match": "(?x)  \\b ([[:alpha:]_]\\w*) \\b (?=\\()"
				}
			]
		},
		"parameters": {
			"name": "meta.parameters.cal",
			"begin": "(\\()",
			"end": "(\\))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.parameters.begin.cal"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.parameters.end.cal"
				}
			},
			"patterns": [
				{
					"match": "(?x)  ([[:alpha:]_]\\w*)    \\s* (?: (,) | (=) | (?=[)]))",
					"captures": {
						"1": {
							"name": "variable.parameter.function.language.cal"
						},
						"2": {
							"name": "punctuation.separator.parameters.cal"
						}
					}
				},
				{
					"include": "#comments"
				},
				{
					"include": "#code"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"match": "\\b(bool|int|uint|float|double)\\b",
					"name": "storage.type.primitive.cal"
				}
			]
		},
		"code": {
			"patterns": [
				{
					"include": "#callable-call"
				},
				{
					"include": "#parens"
				},
				{
					"include": "#numbers"
				},
				{
					"include": "#block-if"
				},
				{
					"include": "#block-while"
				},
				{
					"include": "#block-foreach"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#strings"
				}
			]
		},
		"callable-call": {
			"begin": "(\\.)?\\s*((?!while|if|int|uint|List)[A-Za-z_$][\\w$]*)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.period.cal"
				},
				"2": {
					"name": "entity.name.function.cal"
				},
				"3": {
					"name": "punctuation.definition.parameters.begin.bracket.round.cal"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.bracket.round.cal"
				}
			},
			"name": "meta.callable-call.cal",
			"patterns": [
				{
					"include": "#code"
				}
			]
		},

		"block-foreach": {
			"begin": "\\b(foreach)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.cal"
				}
			},
			"end": "\\b(end|endforeach)\\b\\s",
			"endCaptures": {
				"1": {
					"name": "keyword.control.cal"
				}
			},
			"name": "meta.block.foreach.cal",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#code"
				},
				{
					"match": "\\b(in|do)\\b",
					"name": "keyword.control.cal"
				}
			]
		},
		"block-if": {
			"begin": "\\b(if)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.cal"
				}
			},
			"end": "\\b(end|endif)\\b",
			"endCaptures": {
				"1": {
					"name": "keyword.control.cal"
				}
			},
			"name": "meta.block.if.cal",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#code"
				},
				{
					"match": "\\b(then|else|elsif)\\b",
					"name": "keyword.control.cal"
				}
			]
		},
		"block-while": {
			"begin": "\\b(while)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.cal"
				}
			},
			"end": "\\b(end|endwhile)\\b\\s",
			"endCaptures": {
				"1": {
					"name": "keyword.control.cal"
				}
			},
			"name": "meta.block.while.cal",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#code"
				},
				{
					"match": "\\b(do)\\b",
					"name": "keyword.control.cal"
				}
			]
		},
		"variables-old": {
			"begin": "(?x)\n(?=\n  (\n    \\b(void|boolean|byte|char|short|int|uint|float|long|double)\\b\n    |\n    (?>(\\w+\\.)*[A-Z]+\\w*) # e.g. `javax.ws.rs.Response`, or `String`\n  )\n  (\n    <[\\w<>,\\.?\\s\\[\\]]*> # e.g. `HashMap<Integer, String>`, or `List<java.lang.String>`\n  )?\n  (\n    (\\[\\])* # int[][]\n  )?\n  \\s+\n  [A-Za-z_$][\\w$]* # At least one identifier after space\n  ([\\w\\[\\],$][\\w\\[\\],\\s]*)? # possibly primitive array or additional identifiers\n  \\s*(=|:|;|,)\n)",
			"end": "(?=\\=|:|;|,)",
			"name": "meta.definition.variable.cal",
			"patterns": [
				{
					"include": "#types"
				},
				{
					"include": "#code"
				}
			]
		},
		"variables": {
			"begin": "(?x) (?= ( \\b(int|uint)\\b\\s+(\\(.*\\s*\\))?\\s*[A-Za-z_$][\\w$]* ) )",
			"end": "(?=\\=|(:=)|:|;|,|(begin)|(do)",
			"name": "meta.definition.variable.cal",
			"patterns": [
				{
					"include": "#types"
				},
				{
					"include": "#code"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"match": "(?x)\n\\b(?<!\\$)\n0(x|X)\n(\n  (?<!\\.)[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?[Ll]?(?!\\.)\n  |\n  (\n    [0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\\.?\n    |\n    ([0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?)?\\.[0-9a-fA-F]([0-9a-fA-F_]*[0-9a-fA-F])?\n  )\n  [Pp][+-]?[0-9]([0-9_]*[0-9])?[FfDd]?\n)\n\\b(?!\\$)",
					"name": "constant.numeric.hex.cal"
				},
				{
					"match": "\\b(?<!\\$)0(b|B)[01]([01_]*[01])?[Ll]?\\b(?!\\$)",
					"name": "constant.numeric.binary.cal"
				},
				{
					"match": "\\b(?<!\\$)0[0-7]([0-7_]*[0-7])?[Ll]?\\b(?!\\$)",
					"name": "constant.numeric.octal.cal"
				},
				{
					"match": "(?x)\n(?<!\\$)\n(\n  \\b[0-9]([0-9_]*[0-9])?\\.\\B(?!\\.)\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?\\.([0-9]([0-9_]*[0-9])?)([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  (?<!\\.)\\B\\.[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)[FfDd]?\\b\n  |\n  \\b[0-9]([0-9_]*[0-9])?([Ee][+-]?[0-9]([0-9_]*[0-9])?)?[FfDd]\\b\n  |\n  \\b(0|[1-9]([0-9_]*[0-9])?)(?!\\.)[Ll]?\\b\n)\n(?!\\$)",
					"name": "constant.numeric.decimal.cal"
				}
			]
		},
		"storage-modifiers": {
			"patterns": [
				{
					"match": "\\b(external)\\b",
					"name": "storage.modifier.cal"
				}
			]
		},
		"parens": {
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.round.java"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.round.java"
						}
					},
					"patterns": [
						{
							"include": "#code"
						}
					]
				},
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.bracket.square.java"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.bracket.square.java"
						}
					},
					"patterns": [
						{
							"include": "#code"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match":"(?x) \\b(size | type | true | false | and | or | not)\\b",
					"name": "keyword.source.cal"
				},
				{
					"match": "(<<|>>>?|~|\\^)",
					"name": "keyword.operator.bitwise.cal"
				},
				{
					"match": "((&|\\^|\\||<<|>>>?)=)",
					"name": "keyword.operator.assignment.bitwise.cal"
				},
				{
					"match": "(===?|!=|<=|>=|<>|<|>)",
					"name": "keyword.operator.comparison.cal"
				},
				{
					"match": "([+*/%-]=)",
					"name": "keyword.operator.assignment.arithmetic.cal"
				},
				{
					"match": "(=|:=)",
					"name": "keyword.operator.assignment.cal"
				},
				{
					"match": "(\\-|\\+|\\*|\\/|%)",
					"name": "keyword.operator.arithmetic.cal"
				},
				{
					"match": "(!|&&|\\|\\|)",
					"name": "keyword.operator.logical.cal"
				},
				{
					"match": "(\\||&)",
					"name": "keyword.operator.bitwise.cal"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.cal"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.cal"
						}
					},
					"name": "string.quoted.double.cal",
					"patterns": [
						{
							"match": "\\\\.",
							"name": "constant.character.escape.cal"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.cal"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.cal"
						}
					},
					"name": "string.quoted.single.cal",
					"patterns": [
						{
							"match": "\\\\.",
							"name": "constant.character.escape.cal"
						}
					]
				}
			]
		}
	}
}